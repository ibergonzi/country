Linux
1) instalar LAMP server (ojo el caret al final)
   sudo apt-get install lamp-server^
2) instalar desde el gestor de paquetes synaptic: phpmyadmin, mysql-workbench, geany, git, curl
3) instalar composer (chequear en https://getcomposer.org/ que no hay cambiado nada):
   curl -sS https://getcomposer.org/installer | php
   sudo mv composer.phar /usr/local/bin/composer
4) preparar composer para YII2 (chequear antes en http://www.yiiframework.com/download/):
       composer global require "fxp/composer-asset-plugin:~1.1.1"
5) ya existe el usuario ibergonzi@gmail (pwd petu1999) en github, pero hay que configurar el git globalmente (para los commit):
    git config --global user.name "Ivan Bergonzi"
    git config --global user.email "ibergonzi@gmail.com"
5) sudo chown country:country html
6) bajar y descomprimir el yii2 (el archivo, no a traves de composer) desde http://www.yiiframework.com/download/
7) cambiar el nombre (advanced por el nombre del sitio)
8) dentro de la carpeta country, actualizar Yii2 con composer:
    composer update
9.1) Crear un usuario en mysql a traves de phpmyadmin (usuario:usario) SIN ningún privilegio
9.2) Crear la base de datos "country" con el usuario root y cotejamiento "utf8-general-ci"
9.3) Agregar (por ahora) todos los privilegios del usuario "usuario" para la base de datos country
10) inicializar la plantilla advanced, ejecutar:
     php init
11) sudo chgrp www-data country
12) sudo chgrp www-data models (dentro de country/frontend) y hacer lo mismo con controllers y views
13) desde el explorador de archivos (visual), entrar a las propiedades de las carpetas models, controllers y views, 
    cambiar "Cambiar contenido" de "Solo por el propietario" por "Solo el propietario y el grupo" de forma NO recursiva     
14) completar datos base de datos en common/config/main-local.php (OJO este archivo está en el .gitignore, evaluar si
    no hay que habilitarlo para que lo administre Git)
15) en frontend/config/main.php habilitar URLs amigables (dentro de seccion components)
        'urlManager' => [
                            
          'showScriptName' => false, 
                            
          'enablePrettyUrl' => true
                            
                  ],

16) como root, habilitar el modo rewrite:
    a2enmod rewrite
17) como root, crear configuracion para el sitio yii2, en /etc/apache2/sites-available/, crear el archivo country.conf con el siguiente contenido :
   <VirtualHost *:80>
                            
   ServerName miraflores
                          
   DocumentRoot "/var/www/html/country/frontend/web"
                            
   <Directory "/var/www/html/country/frontend/web">
                            
    # usamos mod_rewrite para las urls amigables
                            
    RewriteEngine on
                            
    # Si un directorio o fichero existe, lo usamos
                            
    RewriteCond %{REQUEST_FILENAME} !-f
                            
    RewriteCond %{REQUEST_FILENAME} !-d
                            
    # Si no, enviamos la petición a index.php
                            
    RewriteRule . index.php
    
    # Usar index.php como archivo indice
    DirectoryIndex index.php
                            
    </Directory>
                            
    </VirtualHost>

18) como root, habilitar el nuevo virtual host:
  a2ensite country.conf
19) opcionalmente deshabilitar el virtual host por defecto:
    a2dissite 000-default.conf
19.1) editar /etc/hosts y agregar linea
      127.0.0.1 miraflores
20) reiniciar apache:
   service apache2 reload
21) ya se puede ingresar a miraflores, miraflores/gii o miraflores/site/* (o miraflores/vista hecha con GII)  
    OJO para usar el gii hay que tener cuidado con los namespaces, en la plantilla simple se usa "app", pero con la 
    plantilla "advanced" hay que usar "frontend", "backend" o "common", por ejemplo para generar controller y vistas en frontent
    usando el modelo User (que está en common\models) se hace asi:
    Model class: common\models\User
    Search model class: frontend\models\UserSearch
    Controller class: frontend\controllers\UserController
    
    
22) la forma de modificar los tamaños de letra y controles en general (de bootstrap) es sobreescribir propiedades css de bootstrap,
    esto se hace en web/css, por ejemplo:
    input[type="text"] {
           height: 20px;
           font-size: 12px;
           line-height: 20px;
        }
    Lo mas recomendable seria agregar un archivo css personalizado y no modificar el web/css
23) para hacer los botones mas chicos hay que modificar la vista:
     'btn btn-success btn-sm' en vez de 'btn btn-success'     
     
24) Se creo una cuenta de correo para enviar los mails desde el sistema:
   usuario: miraflores.adm.notif@gmail.com
   pwd: petu1999

   en common/main-local.php:
       'mailer' => [
            'class' => 'yii\swiftmailer\Mailer',
            'viewPath' => '@common/mail',
            // send all mails to a file by default. You have to set
            // 'useFileTransport' to false and configure a transport
            // for the mailer to send real emails.
            'useFileTransport' => false,
            
            'transport' => [
	            'class' => 'Swift_SmtpTransport',
	            'host' => 'smtp.gmail.com',
	            'username' => 'miraflores.adm.notif@gmail.com',
	            'password' => 'petu1999',
	            'port' => '587',
	            'encryption' => 'tls',
	        ],
            
        ],        
 
 25) Esquema de backups y restores
 Luego de corroborar el funcionamiento de mysql, phpmyadmin hay que habilitar los bin logs de mysql para poder hacer
 backups incrementales
 a) como root entrar a /etc/mysql/mysql.conf.d/mysqld.cnf y cambiar la siguiente linea:
    #log_bin = /var/log/mysql/mysql-bin.log
    por:
    log_bin=
 b) Luego reiniciar el equipo. Los bin logs se generan en la carpeta /var/lib/mysql:
    -rw-rw---- 1 mysql mysql      508 ene 28 12:44 mysqld-bin.000001
    -rw-rw---- 1 mysql mysql       20 ene 28 12:42 mysqld-bin.index
    
    donde el archivo .index contiene la lista de los bin logs. Los permisos y owner:group son importantes para hacer la restauracion
 c) La estrategia de backup consiste en hacer un backup lógico en caliente de todas las bases de datos InnoDB (con mysqldump), 
    rotar el bin log actual por uno nuevo (con mysqladmin flush-logs) y respaldar el log bin anterior
 d) Para el backup logico: mysqldump --single-transaction --flush-logs --master-data=2 \
         --all-databases --delete-master-logs > backup_lunes.sql
         
    --single-transaction permite hacer el backup sin afectar las transacciones en curso
    --flush-logs rota el bin log actual (como si se hiciese un mysqladmin flus-logs)
    --master-data=2 escribe el standard output del comando en el archivo sql
    --delete-master-logs elimina los bin logs viejos
 e) Para restaurar:
    mysql < backup_lunes.sql
    y
    mysqlbinlog mysqld-bin.000007 mysqld-bin.000008 | mysql
    
   
   
   
GIT
Se creo un repositorio en github (usuario ibergonzi, pwd petu1999) de nombre "country" OJO: publico y sin inicializar
Una vez que se instalo el yii se debe inicializar el repositorio local, dentro de la carpeta country
   git init
luego se agrega el repositorio remoto
   git remote add origin https://github.com/ibergonzi/country.git
despues se agregan todos los archivos al repositorio local
   git add .
se hace el primer commit
   git commit -m "Primer commit"
y se actualiza el repositorio remoto            
   git push -u origin master
   
Agregar un archivo (ejemplo con prueba.txt en la carpeta country)
Para agregar un archivo al repositorio local
   git add prueba.txt
Se comprueba que prueba.txt está bajo seguimiento y preparado
   git status
git add tambien se usa cuando se modifica el contenido de un archivo que ya estaba bajo seguimiento, esto se llama "prepararlo"
Se hace el commit
   git commit -m "agregado prueba.txt"
Luego se actualiza nuevamente el repositorio remoto
   git push -u origin master
   
   
Borrar un archivo (ejemplo con prueba.txt en la carpeta country) 
   rm prueba.txt
   git rm prueba.txt
Pero luego hay que hacer commit y actualizar el repositorio remoto    

Volver a la versión anterior de un archivo (modo local)
   git checkout -- prueba.txt
   

Con 2 instalaciones de YII
1) hay que usar el mismo archivo de yii y descomprimirlo en la maquina deploy
2) despues de setear git hay que ejecutar composer update 
3) git init
4) git remote add origin https://github.com/ibergonzi/country.git
5) git pull remote master
6) 



ANOTACIONES GENERALES
1) Para ocultar un grid (para después mostrarlo mediante un boton):
            echo GridView::widget([
				'id'=>'gridrrd',
				'options'=> ['style'=>'display:none'
				],
   El id es importante para después tomarlo con jQuery
   Luego hay que tener un button o html::a que lo visualice, la forma mas fácil es asignarle un class que no 
   se repita (por ejemplo "mostrargridrrd") y registrar el evento click para mostrar el grid:
   
   <?= Html::a('<span class="glyphicon glyphicon-eye-open"></span>&nbsp;Mostrar grid', 
				['#'], ['class' => 'btn btn-success mostrargridrrd']) ?>
				
   $this->registerJs('$(".mostrargridrrd").on("click", function(event){
			event.preventDefault();
			$("#gridrrd").css("display", "block"); 
		});',
		yii\web\View::POS_READY);
	
	Tambien se puede usar id en vez de un class:

   <?= Html::a('<span class="glyphicon glyphicon-eye-open"></span>&nbsp;Mostrar grid', 
				['#'], ['class' => 'btn btn-success','id' => 'mostrargridrrd']) ?>
				
   $this->registerJs('$("#mostrargridrrd").on("click", function(event){
			event.preventDefault();
			$("#gridrrd").css("display", "block"); 
		});',
		yii\web\View::POS_READY);
	
		
2) Cualquier código javascript o jQuery hay que registrarlo SI o SI, sino no funciona, ver punto 1

3) Hasta el momento voy a usar datetime para datos con horas, no los voy a separar en fecha y hora en la BD
4) Pruebas con behaviors, los campos created_at y updated_at DEBEN ser datetime y los campos created_by 
   y updated_by deben ser INT

   en el modelo:
   use yii\behaviors\TimestampBehavior;
   use yii\behaviors\BlameableBehavior;
   use yii\db\Expression;
   
         public function behaviors()
          {
              return [
                  [
                      'class' => BlameableBehavior::className(),
                      'createdByAttribute' => 'created_by',
                      'updatedByAttribute' => 'updated_by',
                  ],
                  [
                      'class' => TimestampBehavior::className(),
					  'createdAtAttribute' => 'created_at',
					  'updatedAtAttribute' => 'updated_at',                 
                      //'value' => new Expression('NOW()')
                      'value' => new Expression('CURRENT_TIMESTAMP')

                  ],

              ];
          }
5) i18n
5.1) desde consola:
   ./yii message/config @common/config/i18n.php
5.2) crear carpeta "messages" dentro de common
5.3) editar common/config/i18n.php y configurar sourcePath, messagePath y languages
      
             

SISTEMA
Los actores del sistema son: Consejo, Administrador, Intendente, Operador Intendencia, Arquitecto, Portero, Propietario, Guardia
Por cada actor se define un rol de RBAC. El RBAC funciona a base de roles y permisos. Los permisos en principio deber ser denominados
como verbos en infinitivo (para interpretar mejor la funcion "can" de RBAC), por ejemplo "Eliminar multa" o "Cargar ingresos"
Las restricciones son las siguientes:
Cualquier usuario con rol "consejo" puede decidir si pueden acceder al sistema cualquiera del resto de los usuarios
El rol "intendencia" administra todos los roles, excepto "consejo" y "administracion". En la vista que usa el intendente no se deberian
poder visualizar los roles "consejo" y "administrador", como asi tampoco los permisos especificos que podrian utilizar estos 2 roles
El rol "administrador" solo puede ejecutar consultas, basicamente debe tener acceso a todos los index y reportes
El rol "consejo" puede hacer lo del rol "administrador" mas la posibilidad de definir a que usuario se le asigna el rol de administrador, 
intendente y operador intendencia 
La instalacion de RBAC se hace de la siguiente forma:
   en common/config/main.php:
   'authManager' => [
            'class' => 'yii\rbac\DbManager',
        ],
   luego en consola:
   ./yii migrate --migrationPath=@yii/rbac/migrations  
   
Se creo el archivo RbacController.php en console/controllers para la definicion inicial de roles y permisos y se ejecuta:
   ./yii rbac/init      
   
el archivo tiene esta estructura (por ejemplo para crear el rol "consejo"):
   <?php
   namespace console\controllers;

   use Yii;
   use yii\console\Controller;

   class RbacController extends Controller
   {
       public function actionInit()
       {
           $auth = Yii::$app->authManager;
		   $consejo=$auth->createRole('consejo');		
		   $auth->add($consejo);
	   }
   }	
El sistema se entrega con 3 usuarios predefinidos: consejo, administracion e intendencia
Se crea tambien un rol "sinRol", el cual se asigna automaticamente desde el signup a todos los usuarios que se den de alta,
para que luego intendencia defina cual es su rol dentro del sistema    	   



ACCESO AL SISTEMA
Se crearon 3 direcciones de mail:
   usuario: miraflores.adm.notif@gmail.com (no tiene usuario en el sistema)
   pwd: mirafloresadm
   proposito: lo usa el sistema para enviar mails, está definido en common/config/mail-local.php
   
   usuario: miraflores.adm.adm@gmail.com (usuario de sistema: administracion)
   pwd: mirafloresadm
   proposito: se usa para crear el usuario del rol "administrador", se debe especificar solo para resetear la contraseña
   
   usuario: miraflores.adm.consejo@gmail.com (usuario de sistema: consejo)
   pwd: mirafloresadm
   proposito: idem administrador
   
A excepcion de los usuarios "consejo" y "administrador", que se crean como si fuesen parametros del sistema, el resto de los usuarios
debe usar el propio sitio.
Cuando un usuario se da de alta, este queda en stand-by hasta que la intendencia le asigne el rol correspondiente   

Libro de guardia
Cualquiera de los porteros puede ingresar al libro de guardia y registrar una entrada al libro, no puede eliminar ni modificar nada.
Debe quedar registrado la entrada al libro, fecha, hora, operador, porton. El portero puede ver todo el libro, inclusive del otro porton
Intendencia solo puede leer el libro y adjuntar una observacion. Se debe registrar el usuario, fecha-hora de la observacion.

Se debe poder adjuntar la foto al id de persona, si es propietario lo  debe hacer intendencia, para el resto lo puede hacer tambien el 
portero.

Vehiculos sin patente: se debe permitir cargar un vehiculo sin patente (marca, modelo y color son obligatorios), antes de la confirmacion
se debe preguntar si es un vehiculo sin patente, caso afirmativo grabar "SIN PATENTE"

Todo lo que se ingrese por porteria se debe grabar en mayusculas.

Conceptos de accesos: la tabla debe ser id o codigo, concepto, requiereTarjeta y solicitaSeguroART (estricto o flexible)

Luego de identificar la persona y el vehiculo, los datos que se piden son Concepto, Motivo (escritura libre en mayusculas) y Autorizantes/
U.F.. Se debe permitir la carga de mas de un autorizante, luego hay que presentar todas las unidades funcionales y que el portero elija
cual corresponde (puede ser mas de una UF)

Restricciones de acceso por autorizante: de dos tipos: permanente o eventual. Se elige el autorizante, se define la persona a autorizar 
(o a restringir) y horarios (por cada dia de la semana). La eventual es idem anterior, pero se setea una fecha (de hoy o futura) y el 
horario

Consulta de personas y vehiculos. Cuando se amplia una consulta y se quieren ver los datos de la persona, se deben traer los accesos con su
autorizante y todos los vehiculos asociados. Lo mismo sucede con la consulta a un vehiculo (pero debe traer las personas asociadas)

La busqueda en la pantalla de ingresos se hace por patente, apellido, UF o documento

Debe existir una consulta de ingresos sin egresos, el cual no tiene filtro, es decir, debe traer todos los registros. Se debe especificar 
todos los datos del ingreso. En teoria esta misma consulta se deberia usar como base para los egresos y egresos grupales.

Se debe evaluar la posibilidad de que el acceso de los porteros se restrinja por la ip de sus equipos, para evitar ingresos desde el 
exterior.

Seguros: Para que el sistema controle la vigencia del seguro (ART), el concepto ingresado debe estar parametrizado: estricto o flexible.
El estricto se aplica al concepto Operario, se controla siempre. Si está vencido el operario debe entregar documentacion para que el portero
lo deje pasar, en tal caso ingresa la nueva fecha de vencimiento del seguro.
El flexible se aplica a todos los proveedores, queda a criterio del portero si carga una fecha de vencimiento (de acuerdo al motivo,
pero esto es responsabilidad del portero) o si acepta la fecha propuesta, es decir la fecha del dia. Esto quiere decir que el portero
le da acceso por el dia de hoy, al dia siguiente aparece un cartel de seguro vencido (es decir del dia anterior).

Infracciones y multas
En el sistema actual están todas juntas, la diferencia es que la multa tiene asignado en algun lugar el monto base. En algun otro lugar
del sistema está especificado el porcentaje de reincidencia y la cantidad de meses que se toman como base del calculo de las reincidencias
Hay que separarlas, una tabla de infracciones y una de multas (y sus correspondientes tablas de conceptos).
La tabla de conceptos de infracciones debe especificar un campo diasLaborales para aquellas infracciones que pueden terminar en multa,
estas infracciones deberian, en base a este parametro almacenar la fecha correspondiente. Tiene que existir una consulta por esta fecha
para que alguien vaya a verificar si el motivo de la infraccion fue resuelto, caso contrario se debe hacer la multa. Si fue resuelto, 
hay que marcar la infraccion como cumplida. OJO con los dias hábiles, como se deben considerar los feriados?
A las infracciones las cargan los porteros y las multas se cargan en Intendencia.
La tabla de conceptos de multas debe especificar el monto base, la cantidad de meses para el calculo y el porcentaje por reincidencia.
Para el cálculo del importe de la multa se deben considerar las reincidencias (incluyendo la multa que se está cargando en ese momento)+ 
de los meses que están definidos en el concepto (hoy son 6 meses para todas las multas).
La cantidad de reincidencias se calcula: 
importe=montoBase + (montoBase * ((cantMultas-1)*porcReinc) / 100)
cantMultas se obtiene sumando la cantidad de multas grabadas en el periodo definido (fecha de multa nueva-cantidad de meses definida)+1
es decir las grabadas + la que se está grabando en ese momento
Este calculo es valido solo para una multa nueva, si se modifica una multa existente, solo se cuentan las grabadas (que tambien incluye
a esta multa a modificar)
En la multa se deberian grabar las bases de este cálculo (montoBase, porcReinc, cantReinc, etc.)
Tanto las infracciones como las multas se refieren a UF, el resto de los datos es informativo (esto es porque las expensas son por UF)
Tambien debería existir una consulta conjunta por rango de fechas.
Preguntar si esta informacion tiene que salir en la pantalla del portero.

   

